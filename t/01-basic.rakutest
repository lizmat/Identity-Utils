use Test;
use Identity::Utils;

plan 110;

my $short-name = "Foo::Bar";
my $ver        = "0.0.42";
my $version    = $ver.Version;
my $ecosystem  = "zef";
my $nick       = "lizmat";
my $auth       = "$ecosystem:$nick";
my $api        = "2.0";
my $from       = "Perl5";
my $sanitized  = $short-name ~ ":ver<$ver>:auth<$auth>:api<$api>:from<$from>";

is build($short-name, :$ver, :$auth, :$api, :$from), $sanitized, 'is build ok?';

for
    (":ver<$ver>",   ":auth<$auth>",   ":api<$api>",   ":from<$from>"),
    (":ver('$ver')", ":auth('$auth')", ":api('$api')", ":from('$from')")
-> @parts {
    my $identity = $short-name ~ @parts.join;

    my $sver  := @parts[0];
    my $sauth := @parts[1];
    my $sapi  := @parts[2];
    my $sfrom := @parts[3];

    for @parts.combinations -> @combinations {
        my $long-name = "$short-name@combinations.join('')";
        is short-name($long-name), $short-name,
          "is short-name of $long-name ok?";
    }

    for @parts.permutations -> @permuted {
        my $long-name = "$short-name@permuted.join('')";
        is sanitize($long-name), $sanitized, "is sanitize of $long-name ok?";
    }

    is ver($identity),            $ver,       'is ver ok?';
    is-deeply version($identity), $version,   'is version ok?';
    is auth($identity),           $auth,      'is auth ok?';
    is ecosystem($identity),      $ecosystem, 'is ecosystem ok?';
    is nick($identity),           $nick,      'is nick ok?';
    is api($identity),            $api,       'is api ok?';
    is from($identity),           $from,      'is from ok?';

    subtest 'without-ver' => {
        plan 2;
        my $without := $short-name ~ $sauth ~ $sapi ~ $sfrom;
        is without-ver($identity), $without, 'is without-ver (1) ok?';
        is without-ver($without),  $without, 'is without-ver (2) ok?';
    }

    subtest 'without-auth' => {
        plan 2;
        my $without := $short-name ~ $sver ~ $sapi ~ $sfrom;
        is without-auth($identity), $without, 'is without-auth (1) ok?';
        is without-auth($without),  $without, 'is without-auth (2) ok?';
    }

    subtest 'without-api' => {
        plan 2;
        my $without := $short-name ~ $sver ~ $sauth ~ $sfrom;
        is without-api($identity), $without, 'is without-api (1) ok?';
        is without-api($without),  $without, 'is without-api (2) ok?';
    }

    subtest 'without-api' => {
        plan 2;
        my $without := $short-name ~ $sver ~ $sauth ~ $sapi;
        is without-from($identity), $without, 'is without-from (1) ok?';
        is without-from($without),  $without, 'is without-from (2) ok?';
    }

    is-deeply is-short-name($identity),  False, 'not is-short-name?';
}

is-deeply is-short-name($short-name), True, 'is-short-name ok?';

for <Perl6 Raku> {
    is build($short-name, :from($_)), $short-name, "is from<$_> ignored?";
}

is-deeply is-pinned($sanitized),   True, 'is is-pinned (1) ok?';
is-deeply is-pinned($short-name), False, 'is is-pinned (2) ok?';

# vim: expandtab shiftwidth=4
